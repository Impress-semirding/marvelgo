函数
·关键字 func 用来声明一个函数 funcName
·函数可以有一个或者多个参数，每个参数后面带有类型，通过，（逗号）分隔
·函数可以返回多个值
·如果只有一个返回值且不声明返回值变量，那么你可以省略 包括返回值 的括号
·如果没有返回值，那么就直接省略最后的返回信息
·如果有返回值，那么必须在函数的外层添加 return 语句

传值与传指针
·传指针使得多个函数能操作同一个对象。
·传指针比较轻量级（8bytes），只是传内存地址，我们可以用指针传递体积大的结构体。如果用参数值传递的话，每次 copy 会话费
相对较多的系统开销（内存和时间）。
·Go 语言中 string，slice，map 这三种类型的实现机制类似指针，所以可以直接传递，而不是取地址后传递指针。（注：若函数需要
改变 slice 的长度，则任需要取地址传递指针）

defer 有坑

函数作为值、类型（闭包）≈ C 语言里面的函数指针
TODO：函数当作值和类型在我们写一些通用接口的时候非常有用。

Panic 和 Recover
Go 没有像 Java 那样的异常机制，它不能抛出异常，而是使用了 panic 和 recover 机制。一定要记住，你应当把它作为最后的手段来
使用。
Panic
    是一个内建函数，可以中断原有的控制流程，进入一个令人恐慌的流程中。当函数 F 调用 panic，函数 F 的执行被中断，但是 F
中的延迟函数会正常执行，然后 F 返回到调用它的地方。在调用的地方，F 的行为就像调用了 panic。这一过程继续向上，知道发生
panic 的 goroutine 中所有调用的函数返回，此时程序退出。恐慌可以直接调用 panic 产生。也可以由运行时错误产生，例如访问越界
的数组。
Recover
    是一个内建函数，可以让进入令人恐慌的流程中的 goroutine 恢复过来。
TODO：recover 仅在延迟函数中有效。在正常的执行过程中，调用 recover 会返回 nil。
如果当前的 goroutine 陷入恐慌，调用 recover 可以捕获到 panic 的输入值，并且恢复正常的执行。

TODO：_ (下划线)的作用


面向对象
method
使用 method 的时候重要注意几点
   ·虽然 method 的名字一摸一样，但是如果接收者不一样，那么 method 就不一样
   ·method 里面可以访问接收者的字段
   ·调用 method 通过 . 访问，就像 struct 里面访问字段一样


interface
interface 是一组 method 的组合，通过 interface 来定义对象的一组行为。
interface 值
定义一个 interface 的变量，那么这个变量里面可以存实现